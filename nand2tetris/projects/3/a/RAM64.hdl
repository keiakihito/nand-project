// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/RAM64.hdl
/**
 * Memory of sixty four 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    // address[0..2] selects which register inside the active RAM8 module to access.
    // address[3..5] determines which RAM8 module's outX is selected.

    PARTS:
    // The address selects which RAM8 module will be used for writing.
    // Ex. If address[3..5] = 101 (5), only the 5th RAM8 module receives the load signal.
    DMux8Way(in=load, sel=address[3..5], a=loada, b=loadb, c=loadc, d=loadd, e=loade, f=loadf, g=loadg, h=loadh);
	
    // Each RAM8 module consists of 8 registers (8 words of 16 bits).
    // The selected RAM8 module updates if its corresponding load signal is 1.
    // The lower 3 bits (address[0..2]) select which register inside the RAM8 module is accessed.
    RAM8(in=in, load=loada, address=address[0..2], out=outa);
	RAM8(in=in, load=loadb, address=address[0..2], out=outb);
	RAM8(in=in, load=loadc, address=address[0..2], out=outc);
	RAM8(in=in, load=loadd, address=address[0..2], out=outd);
	RAM8(in=in, load=loade, address=address[0..2], out=oute);
	RAM8(in=in, load=loadf, address=address[0..2], out=outf);
	RAM8(in=in, load=loadg, address=address[0..2], out=outg);
	RAM8(in=in, load=loadh, address=address[0..2], out=outh);

    // The address selects which RAM8 module's output is sent to the final output.
    // Ex. If address[3..5] = 101 (5), RAM8 module 5's output (outf) is selected as the final output.
	Mux8Way16(a=outa, b=outb, c=outc, d=outd, e=oute, f=outf, g=outg, h=outh, sel=address[3..5], out=out);	
}
