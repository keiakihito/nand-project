// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];
    /*
    address[13..14] decides which section should be loaded
    00 → Select RAM (Lower 16K)
    01 → Select RAM (Upper 16K, but redundant in this case)
    10 → Select Screen Memory
    11 → Select Keyboard Memory
    */
    PARTS:
        // loadram1 and loadram2: Both used for RAM (effectively merged later).
        // loadscreen: Enables writing to screen memory.
        // loadkbd: Enables writing to keyboard memory (not actually used, since the keyboard is read-only).
		DMux4Way(in=load, sel=address[13..14], a=loadram1, b=loadram2, c=loadscreen, d=loadkbd);
	    
        // Combines loadram1 and loadram2 to form a single loadram signal.
        Or(a=loadram1, b=loadram2, out=loadram);

        // The main RAM, 16K words (0x0000 to 0x3FFF).
        RAM16K(in=in, load=loadram, address=address[0..13], out=ramout);

        Screen(in=in, load=loadscreen, address=address[0..12], out=scrout);
        Keyboard(out=kbout);

        // Selects which memory section's output to use based on address[13..14].
        Mux4Way16(a=ramout, b=ramout, c=scrout, d=kbout, sel=address[13..14], out=out);
}