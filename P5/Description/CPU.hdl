// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, the ALU executes the inputted instruction according
 * to the Hack machine language specification, as follows. 
 * The D and A in the language specification refer to CPU-resident registers,
 * while M refers to the memory register addressed by A, i.e. to Memory[A].
 * The inM input holds the value of this register. If the current instruction 
 * needs to write a value to M, the value is placed in outM, the address 
 * of the target register is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset == 1, then the 
 * CPU jumps to address 0 (i.e. sets pc = 0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current program
                         // (reset == 1) or continue executing the current
                         // program (reset == 0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // RAM address (of M)
        pc[15];          // ROM address (of next instruction)

    PARTS:
        // get type of instruction
        Not(in=instruction[15], out=Ainstruction);
        Not(in=Ainstruction, out=Cinstruction);
        
        // Check C-inst stores in A-reg?
        And(a=Cinstruction, b=instruction[5], out=ALUtoA);
        // If yes, Aregin = ALUout, else Aregin = instruction (for A-instructions).    
        Mux16(a=instruction, b=ALUout, sel=ALUtoA, out=Aregin);
        
        // Load A if it's an A-instruction or  C-instruction wants to store in A.
        Or(a=Ainstruction, b=ALUtoA, out=loadA);    
        ARegister(in=Aregin, load=loadA, out=Aout);
        
        // M=D updates memory at A with D.
        // If instruction[12] = 0 → Use A.
        // If instruction[12] = 1 → Use M (memory at A).
        Mux16(a=Aout, b=inM, sel=instruction[12], out=AMout);   

        // If dest=D (instruction[4] = 1), store ALU output in D.
        And(a=Cinstruction, b=instruction[4], out=loadD);
        DRegister(in=ALUout, load=loadD, out=Dout);    
        
        // x = D register
        // y = A register (or M if instruction[12] = 1)
        // Control bits (zx, nx, zy, ny, f, no) determine the operation.
        ALU(x=Dout, y=AMout, zx=instruction[11], nx=instruction[10], 
            zy=instruction[9], ny=instruction[8], f=instruction[7],
            no=instruction[6], out=ALUout, zr=ZRout, ng=NGout); // calculate
            
        // Set outputs for writing memory
        // addressM = Aout[0..14]: RAM address.
        Or16(a=false, b=Aout, out[0..14]=addressM);
        // outM = ALUout → Value to write.
        Or16(a=false, b=ALUout, out=outM);
        // writeM = 1 if Cinstruction and dest=M (instruction[3] = 1).
        And(a=Cinstruction, b=instruction[3], out=writeM);
        
        //Handling Jumps, calc PCload & PCinc - whether to load PC with A reg
        And(a=ZRout, b=instruction[1], out=jeq);    // is zero and jump if zero
        And(a=NGout, b=instruction[2], out=jlt);    // is neg and jump if neg
        Or(a=ZRout, b=NGout, out=zeroOrNeg);
        Not(in=zeroOrNeg, out=positive);            // is positive (not zero and not neg)
        And(a=positive, b=instruction[0], out=jgt); // is pos and jump if pos
        Or(a=jeq, b=jlt, out=jle);
        Or(a=jle, b=jgt, out=jumpToA);              // load PC if cond met and jump if cond
        And(a=Cinstruction, b=jumpToA, out=PCload); // Only jump if C instruction
        Not(in=PCload, out=PCinc);                  // only inc if not load
        
        // PC
        // If PCload = 1, jump to A. Otherwise, PC++ to fetch the next instruction.
        // If reset = 1, force PC = 0.
        PC(in=Aout, inc=PCinc, load=PCload, reset=reset, out[0..14]=pc);
}
}